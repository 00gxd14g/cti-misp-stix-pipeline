[project]
name = "misp-stix-taxii-pipeline"
version = "3.0.0"
description = "Enhanced MISP to STIX/TAXII Threat Intelligence Pipeline with dual version support"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "SOC Team", email = "soc@example.com"}
]
maintainers = [
    {name = "SOC Team", email = "soc@example.com"}
]
keywords = [
    "threat-intelligence",
    "misp",
    "stix",
    "taxii",
    "cybersecurity",
    "ioc",
    "indicators-of-compromise",
    "security-automation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # MISP integration
    "pymisp>=2.4.170",

    # STIX/TAXII 1.x support
    "stix>=1.2.0.11",
    "cybox>=2.1.0.21",
    "cabby>=0.1.23",

    # STIX/TAXII 2.x support
    "stix2>=3.0.1",
    "taxii2-client>=2.3.0",

    # Data processing and analysis
    "networkx>=3.0",
    "redis>=5.0.0",

    # HTTP and API
    "requests>=2.31.0",

    # Rate limiting
    "ratelimit>=2.2.1",

    # Configuration and utilities
    "python-dateutil>=2.8.2",
    "ipaddress>=1.0.23; python_version<'3.3'",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "faker>=19.0.0",

    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "isort>=5.12.0",

    # Type stubs
    "types-redis>=4.6.0",
    "types-requests>=2.31.0",

    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",

    # Development tools
    "ipython>=8.14.0",
    "ipdb>=0.13.13",
]

docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "faker>=19.0.0",
]

[project.urls]
Homepage = "https://github.com/00gxd14g/cti-misp-stix-pipeline"
Documentation = "https://github.com/00gxd14g/cti-misp-stix-pipeline/blob/main/README.md"
Repository = "https://github.com/00gxd14g/cti-misp-stix-pipeline"
Issues = "https://github.com/00gxd14g/cti-misp-stix-pipeline/issues"
Changelog = "https://github.com/00gxd14g/cti-misp-stix-pipeline/blob/main/DIFFERENCES.md"

[project.scripts]
# V1 - Legacy basic converter
cti-extractor = "cti_extractor:main"

# V2 - Enhanced pipeline with dual STIX support
cti-pipeline = "cti_misp_taxii:main"
misp-taxii = "cti_misp_taxii:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "cti_extractor.py",
    "cti_misp_taxii.py",
    "config.ini.example",
    "README.md",
    "DIFFERENCES.md",
    "LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "S",   # flake8-bandit
    "PTH", # flake8-use-pathlib
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert detected
    "S105",  # possible hardcoded password
    "S106",  # possible hardcoded password
    "S107",  # possible hardcoded password
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S106"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "stix.*",
    "cybox.*",
    "cabby.*",
    "stix2.*",
    "taxii2client.*",
    "pymisp.*",
    "networkx.*",
    "ratelimit.*",
]
ignore_missing_imports = true
